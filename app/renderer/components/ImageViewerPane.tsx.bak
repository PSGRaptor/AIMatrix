import React, { useEffect, useState, useCallback, useRef } from "react";
import { FixedSizeGrid as Grid } from "react-window";
import Viewer from "react-viewer";
import piexif from "piexifjs";
import { ToolConfig } from "../env";

// ---- Type Definitions ----
type ImageViewerPaneProps = {
    tool: ToolConfig | null;
    onBack: () => void;
};

type ImageFile = { src: string; alt: string; filePath: string };

// ---- Grid Settings ----
const GRID_COLS = 6;
const THUMB_SIZE = 160; // px (size of each thumb cell)
const GRID_GAP = 20;    // px

const ImageViewerPane: React.FC<ImageViewerPaneProps> = ({ tool, onBack }) => {
    // --- State for images, folders, loading ---
    const [images, setImages] = useState<ImageFile[]>([]);
    const [folders, setFolders] = useState<string[]>([]);
    const [currentFolder, setCurrentFolder] = useState<string | null>(null);

    // --- State for view modes and progress ---
    const [isLoading, setIsLoading] = useState(false);
    const [progress, setProgress] = useState(0);
    const [errorMsg, setErrorMsg] = useState<string | null>(null);

    // --- When user clicks a thumbnail: index of image, or null for grid mode ---
    const [activeIndex, setActiveIndex] = useState<number | null>(null);

    // --- Large image EXIF, Viewer modal, and EXIF modal popup ---
    const [exifData, setExifData] = useState<any | null>(null);
    const [showExifModal, setShowExifModal] = useState(false);
    const [showZoomViewer, setShowZoomViewer] = useState(false);

    // --- Cache for loaded base64 thumb images ---
    const imageSrcs = useRef<{ [idx: number]: string }>({});
    const [updateTick, setUpdateTick] = useState(0); // force rerender cells

    // ---- FOLDER LOGIC ----
    useEffect(() => {
        if (!tool?.outputFolder) {
            setCurrentFolder(null);
            setFolders([]);
            setImages([]);
            setActiveIndex(null);
            return;
        }
        setCurrentFolder(tool.outputFolder);
        (async () => {
            try {
                const subfolders: string[] = await window.electronAPI.listFoldersInFolder(tool.outputFolder);
                setFolders([tool.outputFolder, ...subfolders]);
            } catch {
                setFolders([tool.outputFolder]);
            }
        })();
        setActiveIndex(null);
    }, [tool]);

    // ---- IMAGE LIST LOGIC ----
    useEffect(() => {
        let isMounted = true;
        setImages([]);
        setProgress(0);
        setErrorMsg(null);
        setExifData(null);
        setActiveIndex(null);
        imageSrcs.current = {}; // clear cache

        if (!currentFolder) return;

        (async () => {
            setIsLoading(true);
            try {
                const files: string[] = await window.electronAPI.getImageFilesInFolder(currentFolder);
                const imageArr: ImageFile[] = files.map(filename => ({
                    src: "",
                    alt: filename,
                    filePath: `${currentFolder}/${filename}`
                }));
                if (isMounted) setImages(imageArr);
            } catch (e: any) {
                if (isMounted) setErrorMsg(e?.message || "Failed to scan folder.");
            } finally {
                if (isMounted) setIsLoading(false);
            }
        })();
        return () => { isMounted = false; };
    }, [currentFolder]);

    // ---- Lazy-load Thumbs only when cell is rendered ----
    const loadThumb = useCallback(
        async (idx: number) => {
            if (!images[idx] || imageSrcs.current[idx]) return;
            try {
                const dataUrl = await window.electronAPI.readImageAsDataUrl(images[idx].filePath);
                imageSrcs.current[idx] = dataUrl || "";
                setUpdateTick(tick => tick + 1);
            } catch {
                imageSrcs.current[idx] = "";
            }
        },
        [images]
    );

    // ---- When in image view: load base64 and EXIF for selected image ----
    useEffect(() => {
        if (typeof activeIndex !== "number" || !images[activeIndex]) {
            setExifData(null);
            return;
        }
        (async () => {
            try {
                const dataUrl =
                    imageSrcs.current[activeIndex] ||
                    (await window.electronAPI.readImageAsDataUrl(images[activeIndex].filePath));
                imageSrcs.current[activeIndex] = dataUrl;
                setUpdateTick(tick => tick + 1);
                setExifData(piexif.load(dataUrl));
            } catch {
                setExifData(null);
            }
        })();
    }, [activeIndex, images]);

    // ---- Helper for pretty folder names ----
    function displayFolder(folderPath: string) {
        if (!tool?.outputFolder) return folderPath;
        if (folderPath === tool.outputFolder) return "Root";
        return folderPath.replace(tool.outputFolder, "").replace(/^[/\\]+/, "");
    }

    // ---- Render: Virtualized Thumbnail Cell ----
    const Cell = ({ columnIndex, rowIndex, style }: any) => {
        const idx = rowIndex * GRID_COLS + columnIndex;
        const img = images[idx];
        useEffect(() => {
            if (img && !imageSrcs.current[idx]) loadThumb(idx);
        }, [img, idx, loadThumb, updateTick]);
        if (!img) return null;

        const thumbSrc = imageSrcs.current[idx] || "";
        return (
            <div
                style={{
                    ...style,
                    left: style.left + GRID_GAP,
                    top: style.top + GRID_GAP,
                    width: style.width - GRID_GAP,
                    height: style.height - GRID_GAP,
                    padding: 4,
                }}
                className="flex items-center justify-center bg-gray-100 dark:bg-gray-800 rounded-xl shadow cursor-pointer hover:ring-4 hover:ring-blue-400 transition-all duration-150"
                onClick={() => setActiveIndex(idx)}
                title={img.alt}
            >
                {thumbSrc ? (
                    <img
                        src={thumbSrc}
                        alt={img.alt}
                        style={{
                            width: "100%",
                            height: "100%",
                            objectFit: "contain",
                            borderRadius: 8,
                            background: "#fff",
                            maxWidth: THUMB_SIZE - 10,
                            maxHeight: THUMB_SIZE - 10,
                        }}
                    />
                ) : (
                    <div className="w-full h-full flex items-center justify-center text-gray-400">
                        Loading…
                    </div>
                )}
            </div>
        );
    };

    // ---- UI: grid or image view? ----
    const viewingImage = typeof activeIndex === "number" && images[activeIndex];

    return (
        <div style={{ height: "100%", width: "100%", background: "#111", position: "relative" }}>
            {/* --------- Top Bar --------- */}
            <div className="flex items-center gap-4 p-3 absolute top-0 left-0 z-20">
                <button
                    onClick={() => {
                        if (viewingImage) {
                            setActiveIndex(null); // go back to grid
                            setExifData(null);
                        } else {
                            onBack(); // go back to card menu
                        }
                    }}
                    className="bg-gray-800 text-white px-4 py-2 rounded"
                >
                    {viewingImage ? "Back to Thumbnails" : "Back to Cards"}
                </button>
                {/* Folder Dropdown: show only in grid mode */}
                {folders.length > 1 && !viewingImage && (
                    <select
                        className="bg-gray-900 text-white px-2 py-1 rounded"
                        value={currentFolder || ""}
                        onChange={e => setCurrentFolder(e.target.value)}
                    >
                        {folders.map(folder =>
                            <option key={folder} value={folder}>
                                {displayFolder(folder)}
                            </option>
                        )}
                    </select>
                )}
            </div>

            {/* --------- Loading State --------- */}
            {isLoading && (
                <div className="absolute inset-0 flex flex-col items-center justify-center z-50 bg-black bg-opacity-80">
                    <div className="text-xl text-blue-300 mb-4">Scanning Images…</div>
                    <div className="w-2/3 h-4 bg-gray-800 rounded overflow-hidden mb-2">
                        <div
                            className="h-full bg-blue-500"
                            style={{ width: `50%`, transition: "width 0.3s" }}
                        />
                    </div>
                    <div className="text-xs text-gray-400">{progress}%</div>
                </div>
            )}

            {/* --------- Error State --------- */}
            {errorMsg && (
                <div className="flex items-center justify-center h-full w-full absolute top-0 left-0 text-xl text-red-400 bg-black bg-opacity-70 z-50">
                    {errorMsg}
                </div>
            )}

            {/* --------- Virtualized Thumbnails Grid --------- */}
            {!viewingImage && !isLoading && !errorMsg && images.length > 0 && (
                <div style={{ width: "100%", height: "100%", paddingTop: 60, overflow: "hidden" }}>
                    <Grid
                        columnCount={GRID_COLS}
                        columnWidth={THUMB_SIZE + GRID_GAP}
                        height={window.innerHeight - 90}
                        rowCount={Math.ceil(images.length / GRID_COLS)}
                        rowHeight={THUMB_SIZE + GRID_GAP}
                        width={window.innerWidth - 200}
                    >
                        {Cell}
                    </Grid>
                </div>
            )}

            {/* --------- Image View Mode --------- */}
            {viewingImage && images[activeIndex!] && (
                <div className="flex flex-col items-center justify-center w-full h-full pt-16">
                    <div className="relative flex items-start justify-center w-full h-full">
                        {/* --- Large Image --- */}
                        <div className="flex-1 flex items-center justify-center">
                            <img
                                src={imageSrcs.current[activeIndex!] || ""}
                                alt={images[activeIndex!].alt}
                                style={{
                                    maxWidth: "95vw",
                                    maxHeight: "75vh",
                                    borderRadius: 16,
                                    boxShadow: "0 8px 36px rgba(0,0,0,0.3)",
                                    background: "#fff",
                                    objectFit: "contain",
                                    cursor: "zoom-in"
                                }}
                                onClick={() => setShowZoomViewer(true)}
                                title="Click to Zoom"
                            />
                        </div>
                        {/* --- EXIF beside image (right, for wide screens) --- */}
                        <div className="w-[400px] max-w-[90vw] h-full ml-8 bg-white/90 dark:bg-gray-900/90 text-black dark:text-white rounded-xl shadow-xl border border-blue-400 overflow-auto p-6">
                            <h3 className="text-lg font-bold mb-4 flex items-center">
                                EXIF Metadata
                                <button
                                    className="ml-auto px-2 py-1 bg-blue-100 dark:bg-blue-800 rounded text-blue-600 dark:text-blue-300 text-xs"
                                    onClick={() => setShowExifModal(true)}
                                >
                                    Popout
                                </button>
                            </h3>
                            <div className="text-xs max-h-[65vh] overflow-auto">
                                {exifData && Object.keys(exifData).length > 0 ? (
                                    Object.keys(exifData).map(ifd =>
                                            Object.keys(exifData[ifd] || {}).length > 0 && (
                                                <div key={ifd} className="mb-2">
                                                    <div className="font-semibold text-blue-700 dark:text-blue-400">{ifd}</div>
                                                    {Object.entries(exifData[ifd]).map(([tag, val]) => (
                                                        <div key={tag} className="flex gap-2 py-0.5">
                                                            <div className="w-40 text-gray-700 dark:text-gray-200">{tag}</div>
                                                            <div className="flex-1 text-gray-900 dark:text-gray-50 break-words">{String(val)}</div>
                                                        </div>
                                                    ))}
                                                </div>
                                            )
                                    )
                                ) : (
                                    <div className="text-gray-500">No EXIF data found.</div>
                                )}
                            </div>
                        </div>
                    </div>
                </div>
            )}

            {/* --------- Popout EXIF Modal (optional) --------- */}
            {showExifModal && (
                <div className="fixed inset-0 z-[10050] flex items-center justify-center bg-black/60">
                    <div className="bg-white dark:bg-gray-900 text-black dark:text-white rounded-2xl shadow-2xl p-8 w-full max-w-2xl border-2 border-blue-500/60 dark:border-blue-400/80 overflow-y-auto">
                        <h3 className="text-xl font-bold mb-4">EXIF Metadata (Popout)</h3>
                        <button
                            className="absolute top-4 right-4 p-2 rounded hover:bg-gray-100 dark:hover:bg-gray-800 transition"
                            onClick={() => setShowExifModal(false)}
                        >
                            ✕
                        </button>
                        <div className="text-xs max-h-[65vh] overflow-auto">
                            {exifData && Object.keys(exifData).length > 0 ? (
                                Object.keys(exifData).map(ifd =>
                                        Object.keys(exifData[ifd] || {}).length > 0 && (
                                            <div key={ifd} className="mb-2">
                                                <div className="font-semibold text-blue-700 dark:text-blue-400">{ifd}</div>
                                                {Object.entries(exifData[ifd]).map(([tag, val]) => (
                                                    <div key={tag} className="flex gap-2 py-0.5">
                                                        <div className="w-40 text-gray-700 dark:text-gray-200">{tag}</div>
                                                        <div className="flex-1 text-gray-900 dark:text-gray-50 break-words">{String(val)}</div>
                                                    </div>
                                                ))}
                                            </div>
                                        )
                                )
                            ) : (
                                <div className="text-gray-500">No EXIF data found.</div>
                            )}
                        </div>
                    </div>
                </div>
            )}

            {/* --------- React-Viewer Modal for Zoom/Pan --------- */}
            {showZoomViewer && viewingImage && (
                <Viewer
                    visible={showZoomViewer}
                    onClose={() => setShowZoomViewer(false)}
                    images={[{
                        src: imageSrcs.current[activeIndex!] || "",
                        alt: images[activeIndex!].alt
                    }]}
                    zIndex={9999}
                    drag
                    scalable
                    zoomable
                    downloadable
                    customToolbar={() => []}
                    noNavbar={false}
                    noToolbar={false}
                />
            )}

            {/* --------- No Images State --------- */}
            {!isLoading && !errorMsg && images.length === 0 && (
                <div className="flex items-center justify-center h-full w-full absolute top-0 left-0 text-xl text-gray-400 bg-black bg-opacity-70 z-50">
                    No images found in this folder.
                </div>
            )}
        </div>
    );
};

export default ImageViewerPane;
