import React, { useEffect, useState, useRef } from "react";
import { ToolConfig } from "../env";
import Viewer from "react-viewer-aim";
//const Viewer: any = require('react-viewer-aim').default;
import piexif from "piexifjs";

// Thumbnail size constants
const THUMB_SIZE = 250;

type ImageViewerPaneProps = {
    tool: ToolConfig | null;
    onBack: () => void;
};
type ImageFile = { src: string; alt: string; filePath: string };

const ImageViewerPane: React.FC<ImageViewerPaneProps> = ({ tool, onBack }) => {
    // Folder and file navigation state
    const [currentFolder, setCurrentFolder] = useState<string | null>(null);
    const [folders, setFolders] = useState<string[]>([]);
    const [images, setImages] = useState<ImageFile[]>([]);
    const [isLoading, setIsLoading] = useState(false);
    const [progress, setProgress] = useState(0);

    // Viewer UI state
    const [thumbView, setThumbView] = useState(true);
    const [activeIndex, setActiveIndex] = useState<number>(0);
    const [visible, setVisible] = useState(false);

    // EXIF modal state
    const [showExif, setShowExif] = useState(false);
    const [exifData, setExifData] = useState<any | null>(null);

    const gridScrollRef = useRef<HTMLDivElement>(null);

    // -- Folder/Subfolder logic --
    useEffect(() => {
        setThumbView(true);
        setShowExif(false);
        setVisible(false);
        setImages([]);
        setProgress(0);
        setExifData(null);

        if (!tool || !tool.outputFolder) {
            setCurrentFolder(null);
            setFolders([]);
            return;
        }
        setCurrentFolder(tool.outputFolder);

        (async () => {
            try {
                const subfolders: string[] = await window.electronAPI.listFoldersInFolder(tool.outputFolder);
                setFolders([tool.outputFolder, ...subfolders]);
            } catch {
                setFolders([tool.outputFolder]);
            }
        })();
    }, [tool]);

    // -- Image file list loading --
    useEffect(() => {
        let isMounted = true;
        setImages([]);
        setProgress(0);
        setExifData(null);

        if (!currentFolder) return;

        (async () => {
            setIsLoading(true);
            try {
                const files: string[] = await window.electronAPI.getImageFilesInFolder(currentFolder);
                const imageArr: ImageFile[] = files
                    .filter(filename => !!filename)
                    .map(filename => ({
                        src: "",
                        alt: filename,
                        filePath: `${currentFolder}/${filename}`,
                    }));
                if (isMounted) setImages(imageArr);
            } catch {
                if (isMounted) setImages([]);
            } finally {
                if (isMounted) setIsLoading(false);
            }
        })();

        return () => { isMounted = false; };
    }, [currentFolder]);

    // -- Lazy load visible thumbnails --
    useEffect(() => {
        const N = 100;
        images.slice(0, N).forEach((img, idx) => {
            if (!img.src) {
                window.electronAPI.readImageAsDataUrl(img.filePath).then(dataUrl => {
                    if (dataUrl) {
                        setImages(oldImgs => {
                            const newImgs = [...oldImgs];
                            newImgs[idx] = { ...newImgs[idx], src: dataUrl };
                            return newImgs;
                        });
                        setProgress(p => {
                            const loaded = idx + 1;
                            return Math.round((loaded / Math.max(images.length, 1)) * 100);
                        });
                    }
                });
            }
        });
    }, [images, currentFolder]);

    // -- Load EXIF for current image when modal opens --
    useEffect(() => {
        if (!images.length || !images[activeIndex] || !images[activeIndex].src || !showExif) {
            setExifData(null);
            return;
        }
        try {
            const exifObj = piexif.load(images[activeIndex].src);
            setExifData(exifObj);
        } catch {
            setExifData(null);
        }
    }, [activeIndex, images, showExif]);

    // -- Folder name formatting --
    function displayFolder(folderPath: string) {
        if (!tool?.outputFolder) return folderPath;
        if (folderPath === tool.outputFolder) return "Root";
        return folderPath.replace(tool.outputFolder, "").replace(/^[/\\]/, "");
    }

    // -- RENDER --
    return (
        <div className="relative w-full h-full bg-[#111] flex flex-col" style={{ minHeight: 0, minWidth: 0 }}>
            {/* Top Bar: Back + Folder Picker */}
            <div className="flex items-center gap-4 p-3 z-20">
                <button
                    onClick={() => {
                        setVisible(false);
                        setThumbView(true);
                        setTimeout(onBack, 250);
                    }}
                    className="bg-gray-800 text-white px-4 py-2 rounded"
                >
                    Back
                </button>
                {folders.length > 1 && (
                    <select
                        className="bg-gray-900 text-white px-2 py-1 rounded"
                        value={currentFolder || ""}
                        onChange={e => setCurrentFolder(e.target.value)}
                    >
                        {folders.map(folder =>
                            <option key={folder} value={folder}>
                                {displayFolder(folder)}
                            </option>
                        )}
                    </select>
                )}
            </div>

            {/* Progress Overlay */}
            {isLoading && (
                <div className="absolute inset-0 flex flex-col items-center justify-center z-50 bg-black bg-opacity-80">
                    <div className="text-xl text-blue-300 mb-4">Scanning Imagesâ€¦</div>
                    <div className="w-2/3 h-4 bg-gray-800 rounded overflow-hidden mb-2">
                        <div
                            className="h-full bg-blue-500"
                            style={{ width: `${progress}%`, transition: "width 0.3s" }}
                        />
                    </div>
                    <div className="text-xs text-gray-400">{progress}%</div>
                </div>
            )}

            {/* Grid Thumbnail View */}
            {thumbView && !isLoading && images.length > 0 && (
                <div
                    className="flex flex-wrap justify-center items-center gap-4 pt-12 overflow-auto"
                    style={{ width: "100%", height: "100%" }}
                    ref={gridScrollRef}
                >
                    {images.map((img, idx) => (
                        <div
                            key={img.alt + idx}
                            className="cursor-pointer hover:ring-4 ring-blue-400"
                            style={{
                                width: THUMB_SIZE,
                                height: THUMB_SIZE,
                                background: "#1c1c1c",
                                borderRadius: 12,
                                overflow: "hidden",
                                boxShadow: "0 2px 12px rgba(0,0,0,0.2)",
                                display: "flex",
                                alignItems: "center",
                                justifyContent: "center"
                            }}
                            onClick={() => {
                                setActiveIndex(idx);
                                setThumbView(false);
                                setVisible(true);
                                setShowExif(false);
                            }}
                            title={img.alt}
                        >
                            <img
                                src={img.src || ""}
                                alt={img.alt}
                                style={{
                                    maxWidth: "96%",
                                    maxHeight: "96%",
                                    borderRadius: 10,
                                    objectFit: "contain",
                                    background: "#fff"
                                }}
                            />
                        </div>
                    ))}
                </div>
            )}

            {/* Single Image Viewer (zoomable, modal style, no info pane) */}
            {!thumbView && images.length > 0 && (
                <Viewer
                    visible={visible}
                    images={images.map(img => ({
                        src: img.src || "",
                        alt: img.alt
                    }))}
                    activeIndex={activeIndex}
                    onChange={i => setActiveIndex(typeof i === "number" ? i : 0)}
                    //onChange={(i: number) => setActiveIndex(i)}
                    onClose={() => {
                        setVisible(false);
                        setThumbView(true);
                        setShowExif(false);
                    }}
                    zIndex={9999}
                    drag={true}
                    noNavbar={false}
                    noToolbar={false}
                    scalable={true}
                    zoomable={true}
                    downloadable={true}
                    customToolbar={(toolbar: any[]) =>
                        [
                            ...toolbar,
                            {
                                key: "exif",
                                render: (
                                    <button
                                        key="exif"
                                        title="Show EXIF"
                                        className="react-viewer-toolbar-btn"
                                        style={{ margin: "0 8px", padding: 4, borderRadius: 4 }}
                                        onClick={e => {
                                            e.stopPropagation();
                                            setShowExif(true);
                                        }}
                                    >
                                        ðŸ›ˆ EXIF
                                    </button>
                                ),
                                onClick: () => setShowExif(true),
                            }
                        ]
                    }
                />
            )}

            {/* EXIF Modal */}
            {showExif && images.length > 0 && images[activeIndex] && (
                <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-60 z-[11000]">
                    <div className="max-w-lg max-h-[90vh] overflow-auto bg-white/95 dark:bg-gray-900/95 text-black dark:text-white rounded-xl shadow-xl p-6 border border-blue-400 relative">
                        <button
                            className="absolute top-4 right-4 px-3 py-1 rounded bg-gray-300 hover:bg-gray-400 text-black dark:bg-gray-700 dark:text-white dark:hover:bg-gray-800"
                            onClick={() => setShowExif(false)}
                        > Close </button>
                        <h3 className="text-lg font-bold mb-2">
                            EXIF Metadata for <span className="font-mono">{images[activeIndex]?.alt || ""}</span>
                        </h3>
                        <div className="text-xs max-h-[60vh] overflow-auto">
                            {exifData && Object.keys(exifData).map(ifd =>
                                    exifData[ifd] && Object.keys(exifData[ifd]).length > 0 && (
                                        <div key={ifd} className="mb-2">
                                            <div className="font-semibold text-blue-700 dark:text-blue-400">{ifd}</div>
                                            {Object.entries(exifData[ifd]).map(([tag, val]) => (
                                                <div key={tag} className="flex gap-2 py-0.5">
                                                    <div className="w-40 text-gray-700 dark:text-gray-200">{tag}</div>
                                                    <div className="flex-1 text-gray-900 dark:text-gray-50 break-words">{String(val)}</div>
                                                </div>
                                            ))}
                                        </div>
                                    )
                            )}
                            {!exifData && <div className="text-gray-400">No EXIF data found.</div>}
                        </div>
                    </div>
                </div>
            )}

            {/* Empty State */}
            {!isLoading && images.length === 0 && (
                <div className="flex items-center justify-center h-full w-full absolute top-0 left-0 text-xl text-gray-400 bg-black bg-opacity-70 z-50">
                    No images found in this folder.
                </div>
            )}
        </div>
    );
};

export default ImageViewerPane;
